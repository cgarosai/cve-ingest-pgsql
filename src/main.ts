import { getPostgreDb } from "./conf.ts";
// @ts-ignore-
import { parse as parseYaml } from "https://deno.land/std@0.63.0/encoding/yaml.ts";
import { DataIngester } from "./index.ts";
import {
  PostgrePersistorFactory,
} from "./utils/persistor.ts";


async function getPersistorFactory(filename: string, isDebug: boolean) {
  
  const content = await Deno.readTextFile(filename);
  const parsed = parseYaml(content) as Conf;
  
  
  const client = getPostgreDb(
    parsed.db.pg.hostname,
    parsed.db.pg.port,
    parsed.db.pg.dbName,
    parsed.db.pg.user,
    parsed.db.pg.password,
  );
  return {
    persistor: new PostgrePersistorFactory(client),
    conf: parsed,
  };
}

type PostgreConf = {
  user: string,
  hostname: string,
  port: string,
  dbName: string,
  password: string,
}

type Conf = {
  db: {
    pg: PostgreConf;
  };
};

export async function ensureDataIsUpToDate() {
  const debug = Boolean(Deno.env.get("DEBUG")) || false;
  const confFile = "conf.yaml";
  const { persistor, conf} = await getPersistorFactory(confFile, debug);
  const ingester = new DataIngester(persistor, conf.db.pg.dbName);
  await ingester.populateCPE();
  await ingester.populateMATCHING();
  await ingester.populateCVE();
}

await ensureDataIsUpToDate();
