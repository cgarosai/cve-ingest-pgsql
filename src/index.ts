import { CPEIngester } from "./ingesters/cpe/cpe.ts";
import { CPE } from "./ingesters/cpe/type.ts";
import { MATCHING } from "./ingesters/matching/type.ts";
import { CVEIngester } from "./ingesters/cve/cve.ts";
import { UpdateProps } from "./ingesters/cve/type.ts";
import { PersistorFactory } from "./utils/persistor.ts";
import { BaseCVESearch, Update } from "./utils/types.ts";
import { MATCHINGIngester } from "./ingesters/matching/matching.ts";


export const infosTable = "INFOS";
export const cpeFeed = "CPE";
export const cveFeed = "CVE";
export const matchingFeed = "MATCHING";


export class DataIngester<DatabaseName extends string> {
  databaseName: DatabaseName;
  factory: PersistorFactory;
  opened = true;

  constructor(client: PersistorFactory, databaseName: DatabaseName) {
    this.factory = client;
    this.databaseName = databaseName;
  }


  getMatchingPersistor = async () => {
    const persistor = await this.factory.make(
      matchingFeed,
      (matching: MATCHING) => ({id: matching.id}),
    );
    return persistor;
  }

  protected getCPEPersistor = async () => {
    const persistor = await this.factory.make(
      cpeFeed,
      (cpe: CPE) => ({ id: cpe.id }),
    );
    return persistor;
  };

  protected getCVEPersistor = async () => {
    const cvePersistor = await this.factory.make(
      cveFeed,
      (cve: BaseCVESearch) => ({ id: cve.id }),
    );
    return cvePersistor;
  };

  protected getUpdatePersistor = async () => {
    const infoPersistor = await this.factory.make(
      infosTable,
      (update: Update) => (update.name)
    );
    return infoPersistor;
  };

  /**
   * Gets all the cpe matches from NVD and puts them in the mongo db
   */
  async populateCPE() {
    const persistor = await this.getCPEPersistor();
    await persistor.open();
    const updatePersistor = await this.getUpdatePersistor();
    const cpeHandler = new CPEIngester(persistor, updatePersistor);
    await cpeHandler.populateCpes()
    await persistor.close();
  }

  async populateMATCHING() {
    const persistor = await this.getMatchingPersistor();
    await persistor.open();
    const updatePersistor = await this.getUpdatePersistor();
    const matchingHandler = new MATCHINGIngester(persistor, updatePersistor);
    await matchingHandler.populateMatchings()
    await persistor.close();
  }


  async populateCVE(props?: UpdateProps) {
    const cpePersistor = await this.getCPEPersistor();
    await cpePersistor.open();

    const cvePersistor = await this.getCVEPersistor();
    await cpePersistor.open();

    const updatePersistor = await this.getUpdatePersistor();
    await cpePersistor.open();

    const cveHandler = new CVEIngester(
      cvePersistor,
      cpePersistor,
      updatePersistor,
    );
    await cveHandler.populateCves(props);

    cvePersistor.close(); // closing the client so no need to close others but no clean
    // cpePersistor.close();
    // infoPersistor.close();
  }
}
