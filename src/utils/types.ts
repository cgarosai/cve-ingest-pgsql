import oneCVE from "../example/oneCVE.json" assert { type: "json" };
import oneCPE from "../example/oneCPE.json" assert { type: "json" };
import oneMATCHING from "../example/oneMatching.json" assert { type: "json" };
export type EmptyObject = Record<string | number | symbol, never>;

export type BaseCVESearch = {
  id: string;
  summary?: string;
  cwe: string;
  assigner: string;
  "Published": Date;
  "Modified": Date;
  last_modified: Date;
  access: Partial<Access>;
  impact: Partial<Impact>;
  exploitability3: Partial<Exploitability3>;
  impact3: Partial<Impact3>;
  cvss3: number | null;
  cvss3_vector: string | null;
  impactScore3: number;
  exploitabilityScore3: number;
  references: string[];
  status: string;
  cvss: number | null;
  exploitabilityScore: number;
  impactScore: number;
  cvss_time: Date;

  cvss_vector: string;
  vulnerable_configuration_cpe_2_2: string[];
  matches: CVEMATCHES;
};

export type CVESearch = BaseCVESearch & {
  vulnerable_product_stems: Set<string>;
  products: Set<string>;
  vendors: Set<string>;
  cpe_id: string;
};

export type Impact = {
  availability: string;
  confidentiality: string;
  integrity: string;
};

export type Impact3 = {
  availability: string;
  confidentiality: string;
  integrity: string;
};

// deno-lint-ignore ban-types
export type Access = {
  authentication: string, 
  complexity: string, 
  vector: string 
};


export type Exploitability3 = {attackvector: string,
  attackcomplexity: string,
  privilegesrequired: string,
  userinteraction: string,
  scope: string
};


export type SetKeys =
| "matches"
| "vendors"


export type BaseChunk = {
  page: number;
  expectedPages: number;
  start?: Date;
  end?: Date;
  hasRemaining: boolean;
};

export type CpeChunk = BaseChunk & {
  result: CPENVDResult
}

export type MatchingChunk = BaseChunk & {
  result: MATCHINGNVDResult
}

export type CveChunk = BaseChunk & {
  result: CVENVDResult;
}

export type BulkWriteResult = {
  insertedCount: number;
  matchedCount: number;
  modifiedCount: number;
  deletedCount: number;
  upsertedCount: number;
};

export type CPESearch = {
  id: string;
  product: string;
  "created_at": string;
  "updated_at": string;
  version: string;
  cpe: string;
}

export type MATCHINGSearch = {
  matchCriteriaId: string;
  criteria: string;
  lastModified: string;
  cpeLastModified: string;
  created: string;
  status: string;
  matches: Array<{cpeName: string; cpeNameId: string}>;
}
/**
 * {
_id: ObjectId('636cddc804e3f99704fa050a'),
id: '786f8c77c06be03648666200430bf54309115fe7',
cpe_2_2: 'cpe:2.3:a:10-strike:network_monitor:5.4:*:*:*:*:*:*:*',
cpe_name: [
  {
    cpe23Uri: 'cpe:2.3:a:10-strike:network_monitor:5.4:*:*:*:*:*:*:*'
  }
],
product: 'network_monitor',
title: '10-Strike Network Monitor 5.4',
    vendor: '10-strike'
}
 */

export type CPEInfos = {
  cpe_name: { cpe23Uri: string }[];
};

export type CVENVDResult = typeof oneCVE;
export type FullCVENVD = typeof oneCVE.vulnerabilities[0];
export type CVENVD = FullCVENVD["cve"];
export type CVECONF = CVENVD["configurations"][0];
export type CVEMATCHES = CVECONF["nodes"][0]["cpeMatch"]

export type CPENVDResult = typeof oneCPE;
export type FullCPENVD = typeof oneCPE.products[0];
export type CPENVD = FullCPENVD["cpe"];

export type MATCHINGNVDResult = typeof oneMATCHING;
export type FullMATCHINGNVD = typeof oneMATCHING.matchStrings[0];
export type MATCHINGNVD = FullMATCHINGNVD['matchString'];

declare const tag: unique symbol;

declare type Tagged<Token> = {
  readonly [tag]: Token;
};
export type Opaque<Type, Token = unknown> = Type & Tagged<Token>;

export type Milliseconds = Opaque<number, "ms">;


// if id = 1 : CPE update if id = 2 : CVE update
export type Update = {
  id: number,
  last_update: Date,
  name: "CPE" | "CVE" | "MATCH";
}